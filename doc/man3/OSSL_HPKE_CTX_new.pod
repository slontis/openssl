=pod

=head1 NAME

OSSL_HPKE_CTX_new, OSSL_HPKE_CTX_free,
OSSL_HPKE_encap, OSSL_HPKE_decap,
OSSL_HPKE_seal, OSSL_HPKE_open, OSSL_HPKE_export,
OSSL_HPKE_suite_check, OSSL_HPKE_str2suite,
OSSL_HPKE_keygen, OSSL_HPKE_get_grease_value,
OSSL_HPKE_get_ciphertext_size, OSSL_HPKE_get_public_encap_size,
OSSL_HPKE_get_recommended_ikmelen,
OSSL_HPKE_CTX_set1_psk, OSSL_HPKE_CTX_set1_ikme,
OSSL_HPKE_CTX_set1_authpriv, OSSL_HPKE_CTX_set1_authpub,
OSSL_HPKE_CTX_get_seq, OSSL_HPKE_CTX_set_seq
- Hybrid Public Key Encryption (HPKE) functions

=head1 SYNOPSIS

 #include <openssl/hpke.h>

 typedef struct {
     uint16_t    kem_id;
     uint16_t    kdf_id;
     uint16_t    aead_id;
 } OSSL_HPKE_SUITE;

 OSSL_HPKE_CTX *OSSL_HPKE_CTX_new(int mode, OSSL_HPKE_SUITE suite,
                                  OSSL_LIB_CTX *libctx, const char *propq);
 void OSSL_HPKE_CTX_free(OSSL_HPKE_CTX *ctx);

 int OSSL_HPKE_encap(OSSL_HPKE_CTX *ctx,
                     unsigned char *enc, size_t *enclen,
                     unsigned char *pub, size_t publen,
                     const unsigned char *info, size_t infolen);
 int OSSL_HPKE_seal(OSSL_HPKE_CTX *ctx,
                    unsigned char *ct, size_t *ctlen,
                    const unsigned char *aad, size_t aadlen,
                    const unsigned char *pt, size_t ptlen);

 int OSSL_HPKE_keygen(OSSL_LIB_CTX *libctx, const char *propq,
                      OSSL_HPKE_SUITE suite,
                      const unsigned char *ikm, size_t ikmlen,
                      unsigned char *pub, size_t *publen, EVP_PKEY **priv);
 int OSSL_HPKE_decap(OSSL_HPKE_CTX *ctx,
                     const unsigned char *enc, size_t enclen,
                     EVP_PKEY *recippriv,
                     const unsigned char *info, size_t infolen);
 int OSSL_HPKE_open(OSSL_HPKE_CTX *ctx,
                    unsigned char *pt, size_t *ptlen,
                    const unsigned char *aad, size_t aadlen,
                    const unsigned char *ct, size_t ctlen);

 int OSSL_HPKE_export(OSSL_HPKE_CTX *ctx,
                      unsigned char *secret,
                      size_t secret_len,
                      const unsigned char *label,
                      size_t labellen);

 int OSSL_HPKE_CTX_set1_authpriv(OSSL_HPKE_CTX *ctx, EVP_PKEY *priv);
 int OSSL_HPKE_CTX_set1_authpub(OSSL_HPKE_CTX *ctx,
                                unsigned char *pub,
                                size_t publen);
 int OSSL_HPKE_CTX_set1_psk(OSSL_HPKE_CTX *ctx,
                            const char *pskid,
                            const unsigned char *psk, size_t psklen);

 int OSSL_HPKE_CTX_get_seq(OSSL_HPKE_CTX *ctx, uint64_t *seq);
 int OSSL_HPKE_CTX_set_seq(OSSL_HPKE_CTX *ctx, uint64_t seq);

 int OSSL_HPKE_CTX_set1_ikme(OSSL_HPKE_CTX *ctx,
                             const unsigned char *ikme, size_t ikmelen);

 int OSSL_HPKE_suite_check(OSSL_HPKE_SUITE suite);
 int OSSL_HPKE_get_grease_value(OSSL_LIB_CTX *libctx, const char *propq,
                                OSSL_HPKE_SUITE *suite_in,
                                OSSL_HPKE_SUITE *suite,
                                unsigned char *enc,
                                size_t *enclen,
                                unsigned char *ct,
                                size_t ctlen);

 int OSSL_HPKE_str2suite(const char *str, OSSL_HPKE_SUITE *suite);
 size_t OSSL_HPKE_get_ciphertext_size(OSSL_HPKE_SUITE suite, size_t clearlen);
 size_t OSSL_HPKE_get_public_encap_size(OSSL_HPKE_SUITE suite);
 size_t OSSL_HPKE_get_recommended_ikmelen(OSSL_HPKE_SUITE suite);

=head1 DESCRIPTION

These functions provide an API for using the form of Hybrid Public Key
Encryption (HPKE) defined in RFC9180. Understanding the HPKE specification 
is likely required before using these APIs.  HPKE is used by various 
other IETF specifications, including the (draft) TLS Encrypted Client 
Hello (ECH) specification and others.

HPKE is a standardised, highly flexible construct for encrypting "to" a public
key that supports combinations of a key encapsulation method (KEM), a key
derivation function (KDF) and an authenticated encryption with additional data
(AEAD) algorithm, with optional sender authentication.

The sender and a receiver here will generally be using some application or
protocol making use of HPKE. For example, with ECH,
the sender will be a browser and the receiver will be a web server.

=head2 Data strutures

B<OSSL_HPKE_SUITE> is a structure that holds identifiers for the algorithms
used for KEM, KDF and AEAD operations. 

B<OSSL_HPKE_CTX> is an context that maintains internal state as HPKE
operations are carried out. Seperate B<OSSL_HPKE_CTX> objects must be used for
the sender and receiver. Attempting to use a single context for both will
result in errors.

=head2 OSSL_HPKE_SUITE Identifiers

The identifiers used by B<OSSL_HPKE_SUITE> are:

The KEM identifier I<kem_id> is one of the following:

=over 4

=item 0x10 B<OSSL_HPKE_KEM_ID_P256>

=item 0x11 B<OSSL_HPKE_KEM_ID_P384>

=item 0x12 B<OSSL_HPKE_KEM_ID_P521>

=item 0x20 B<OSSL_HPKE_KEM_ID_X25519>

=item 0x21 B<OSSL_HPKE_KEM_ID_X448>

=back

The KDF identifier I<kdf_id> is one of the following:

=over 4

=item 0x01 B<OSSL_HPKE_KDF_ID_HKDF_SHA256>

=item 0x02 B<OSSL_HPKE_KDF_ID_HKDF_SHA384>

=item 0x03 B<OSSL_HPKE_KDF_ID_HKDF_SHA512>

=back

The AEAD identifier I<aead_id> is one of the following:

=over 4

=item 0x01 B<SSL_HPKE_AEAD_ID_AES_GCM_128>

=item 0x02 B<SSL_HPKE_AEAD_ID_AES_GCM_256>

=item 0x03 B<SSL_HPKE_AEAD_ID_CHACHA_POLY1305>

=item 0xFFFF B<SSL_HPKE_AEAD_ID_EXPORTONLY>

This identifier indicates that aead operations are
not needed. OSSL_HPKE_export() can be used, but
OSSL_HPKE_open() and OSSL_HPKE_seal() will return an error
if called.

=back

=head2 HPKE Modes

HPKE supports the following variants of Authentication using a mode Identifier:

=over 4

=item 0 B<OSSL_HPKE_MODE_BASE>

Authentication is not used.

=item 1 <OSSL_HPKE_MODE_PSK>

Authenticates possession of a pre-shared key (PSK).

=item 2 <OSSL_HPKE_MODE_AUTH>

Authenticates possession of a KEM-based sender private key.

=item 3 <OSSL_HPKE_MODE_PSKAUTH>

A combination of B<OSSL_HPKE_MODE_PSK> and B<OSSL_HPKE_MODE_AUTH>.
Both the PSK and the senders authentication public/private must be
supplied before the encapsulation/decapsulation operation will work.

=back

For further information related to authentication see L</Pre-Shared Key HPKE modes>
and L</Sender-authenticated HPKE Modes>.


=head2 Context Construct/Free

OSSL_HPKE_CTX_new() creates a B<OSSL_HPKE_CTX> context object used for subsequent
HPKE operations, given a I<mode> (See L</HPKE Modes>) and
I<suite> (see L</OSSL_HPKE_SUITE Identifiers>). The I<libctx> and I<propq>
are used when fetching algorithms from providers and may be set to NULL.

OSSL_HPKE_CTX_free() frees the I<ctx> B<OSSL_HPKE_CTX> that was created previously
by a call to OSSL_HPKE_CTX_new().

=head2 Sender APIs

A sender's goal is to use HPKE to encrypt using a public key, via use of a
KEM, then a KDF and finally an AEAD.  The first step is to encapsulate (using
OSSL_HPKE_encap()) the sender's public value using the recipient's public key, 
(I<pub>) and to internally derive secrets. This produces the encapsulated public value 
(I<enc>) to be sent to the recipient in whatever protocol is using HPKE. Having done the
encapsulation step, the sender can then make one or more calls to
OSSL_HPKE_seal() to encrypt plaintexts using the secret stored within I<ctx>.


OSSL_HPKE_encap() uses the HPKE context I<ctx>, the recipient public value 
I<pub>, and an optional I<info> parameter that can bind other protocol information such as
identifiers, and produces the encapsulated public value I<enc>.
Generally, the encapsulated public value I<enc> corresponds to a
single-use ephemeral private value created as part of the 
encapsulation process. Only a single call to OSSL_HPKE_encap() is allowed for a given
B<OSSL_HPKE_CTX>.

OSSL_HPKE_seal() takes the B<OSSL_HPKE_CTX> context I<ctx>, the plaintext I<pt>
of size I<ptlen> and optional additional authenticated data I<aad> of size I<aadlen>,
and returns the ciphertext I<ct> of size I< ctlen>.
OSSL_HPKE_encap() must be called before the OSSL_HPKE_seal().
OSSL_HPKE_seal() may be called multiple times, since the "nonce" is incremented
internally.

=head2 Recipient APIs

Recipients using HPKE require a typically less ephemeral private value so that
the public value can be distirbuted to potential senders via whatever protocol
is using HPKE. For this reason, recipients will generally first generate a key
pair and will need to manage their private key value using standard mechanisms
outside the scope of this API. Private keys use normal L<EVP_PKEY(3)> pointers
so normal private key management mechanisms can be used for the relevant
values.

In order to enable encapsulation, the recipient needs to make it's public value
available to the sender. There is no generic HPKE format defined for that - the
relevant formatting is intended to be defined by the application/protocols that
makes use of HPKE. ECH for example defines an ECHConfig data structure that
combines the public value with other ECH data items. Normal library functions
must therefore be used to extract the public value in the required format based
on the L<EVP_PKEY(3)> for the private value.

OSSL_HPKE_keygen() provides a way for recipients to generate a key pair based
on the HPKE I<suite> to be used. The main output is the L<EVP_PKEY(3)> pointer
for the private value, I<priv>. I<libctx> and a property string (I<propq>) can
be provided as optional inputs. 

The HPKE specification also defines a deterministic key generation scheme where
the private value is derived from initial keying material (IKM), so
OSSL_HPKE_keygen() also has an option to use that scheme, using the I<ikm>
parameter. When NULL/0 values are provided instead of a real IKM, then a
randomly generated key for the relevant I<suite> will be produced.

OSSL_HPKE_decap() takes as input the sender's encapsulated public value
produced by OSSL_HPKE_encap() (I<enc>) and the recipient's L<EVP_PKEY(3)>
pointer (I<prov>), and then re-generates the internal secret derived by the
sender. As before, an optional I<info> parameter allows binding that derived
secret to other application/protocol artefacts. Only a single call to
OSSL_HPKE_decap() is allowed for a given B<OSSL_HPKE_CTX>.

OSSL_HPKE_open() is used by the recipient to decrypt the ciphertext I<ct> of
size I<ctlen> using the I<ctx> and additional authenticated data I<aad> of
size I<aadlen>, to produce the plaintext I<pt> of size I<ptlen>.
OSSL_HPKE_open() may be called multiple times, but as with OSSL_HPKE_seal()
there is an internally incrementing nonce value so ciphertexts need to be presented
in the same order as used by the OSSL_HPKE_seal().
See L</Re-sequencing> if you need to process multiple ciphertexts in a different order.

=head2 Exporting Secrets

HPKE defines a way to produce exported secrets for use by the
appclication. For this to work, the sender must have frst called
OSSL_HPKE_encap() and, in order to be able to derive the same exported secret,
and the receiver must have called the corresponding OSSL_HPKE_decap().  
The I<suite> used when forming an OSSL_HPKE_CTX to be used for exporting secrets
must use the "fake" encryption algorithm denoted by the identifier
I<OSSL_HPKE_AEAD_ID_EXPORTONLY>. (That means a single OSSL_HPKE_CTX instance
cannot be used for both "real" encryption and for exporting secrets.)

Once encapsulation/decapsulation is done either side can use the
OSSL_HPKE_export() operation to derive a new application-visible secret from
the internally derived secret and an application supplied I<label>.
The output exported secret will be returned in the I<secret> parameter.

Multiple calls to OSSL_HPKE_export() with the same OSSL_HPKE_CTX
are supported, though there is again an internally
incrementing nonce value so that the sequence of exported secrets
needs to be managed by the application. The same or different
I<label> values can be provided to each call, though again applications 
will need to keep track of what was used when.

=head2 Sender-authenticated HPKE Modes

HPKE defines modes that support KEM-based sender-authentication
B<OSSL_HPKE_MODE_AUTH> and B<OSSL_HPKE_MODE_PSKAUTH>). This works by binding
the sender's authentication private/public values into the encapsulation and
decapsulation operations. The key used for such modes must also use the same
KEM as used for the overall exchange. OSSL_HPKE_keygen() can be used to
generate the private value required.
OSSL_HPKE_CTX_set1_authpriv() can be used by the sender to set the senders
private I<priv> B<EVP_PKEY> key into the hpke ctx I<ctx> before calling
OSSL_HPKE_encap().
OSSL_HPKE_CTX_set1_authpub() can be used by the receiver to set the senders
encoded pub key I<pub> of size I<publen> into the hpke ctx I<ctx> before 
before calling OSSL_HPKE_decap().
For EC curves, I<pub> is in an uncompressed encoding format.

=head2 Pre-Shared Key HPKE modes

HPKE also defines a symmetric equivalent to the authentication described above
using a pre-shared key (PSK) and a PSK identifier. PSKs can be used with the
B<OSSL_HPKE_MODE_PSK> and B<OSSL_HPKE_MODE_PSKAUTH> modes.

OSSL_HPKE_CTX_set1_psk() sets the PSK identifier I<pskid) string, and PSK buffer
I<psk> of length I<psklen> into the I<ctx>. If required this must be called
before OSSL_HPKE_encap() or OSSL_HPKE_decap().
As PSKs are symmetric the same calls must happen on both sender and receiver
sides.

=head2 Deterministic key generation for senders

HPKE allows the deterministic key generation option to be used by senders. That
is generally undesirable as it exposes the relevant secret to the application
rather then preserving it within the library and is more likely to result in
use of predictable values or values that leak. However, if an application
really has to operate in this manner then IKM can be used to modify the
sender's OSSL_HPKE_CTX instance using the OSSL_HPKE_CTX_set1_ikme() API with
the IKM supplied in the I<ikme> parameter. As one would expect that needs to be
called prior to the call to OSSL_HPLE_encap().

=head2 Re-sequencing

Some protocols may have to deal with packet loss while still being able to
decrypt arriving packets later. We provide a way to set the increment used for
the nonce to the next subsequent call to OSSL_HPKE_seal() or OSSL_HPKE_open().
The OSSL_HPLE_CTX_set_seq() API can be used for such purposes with the I<seq>
parameter value resetting the internal nonce to be used for the next call.

A baseline nonce value is established based on the encapsulation or
decapsulation operation and is then incremented by 1 for each call to seal or
open. (In other words, the I<seq> is a zero-based counter.)

If a caller needs to determine how many calls to seal or open have been made
the OSSL_HPKE_CTX_get_seq() API can be used to retrive the increment (in the
I<seq> output) that will be used in the next call to seal or open. That would
return 0 before the first call a sender made to OSSL_HPKE_seal() and 1 after
that first call. 

For compatibility with other implementations these I<seq> increments are
represented as a I<uint64_t>.

Note that re-use of the same nonce and key with different plaintexts is very
dangerous and can lead to loss of confidentiality. Applications therefore need
to exercise extreme caution in using these APIs and would be better off avoiding
them entirely.

=head2 Protocol Convenience Functions 

Additional convenience APIs allow the caller to access internal details of
local HPKE support and/or algorithms, such as parmameter lengths.

OSSL_HPKE_suite_check() checks if a specific HPKE I<suite> 
is supported locally.

To assist with memory alliocation, OSSL_HPKE_get_ciphertext_size() provides a
way for the caller to know by how much cipertext will be longer than a
plaintext of length I<clearlen>.  (AEAD algoriths add a data integrity tag and
so there is a small amount of ciphertext expansion.)

OSSL_HPKE_get_public_encap_size() provides a way for senders to know how big
the encapsulated public value will be for a given HPKE I<suite>.

OSSL_HPKE_get_recommended_ikmelen() allows the caller to get a recommendation
for how long (in octets) an IKM to use with a given I<suite>. This is needed in
cases where the same public value needs to be (re-)generated by a sender before
calling OSSL_HPKE_seal().

OSSL_HPKE_get_grease_value() produces values of the appropriate length for a
given I<suite_in> value (or a random value if I<suite_in> is NULL) so that a
protocol using HPKE can send so-called GREASE (see RFC8701) values that are
harder to distinguish from a real use of HPKE. The buffer sizes should
be supplied on input. The output I<enc> value will have an appropriate
length for I<suite_out> and a random value, and the I<ct> output will be
a random value.

OSSL_HPKE_str2suite() maps input I<str> strings to B<OSSL_HPKE_SUITE>.
The input I<str> should be a comma-separated string with a KEM,
KDF and AEAD name in that order, for example "x25519,hkdf-sha256,aes128gcm".
This can be used by command line tools that accept string form names for HPKE
codepoints. Valid names are:
"p256", "p384", "p521", "x25519" and "x448" for kem,
"hkdf-SHA256", "hkdf-SHA384" and "hkdf-SHA512" for kdf, and
"aes-gcm-128", "aes-gcm-256" and "chacha20-poly1305" for aead.
String variants of the numbers listed in L</OSSL_HPKE_SUITE Identifiers>
can also be used.

=head2 Parameter Notes

Notes on the various kinds of input and output for these APIs:

=over 4

- buffers: all buffers are presented to these APIs using a pair of parameters:
an unsigned char* pointer I<foo> and a size_t length value called I<foolen>.

- for input/output buffers, the (pointer to the) length on input is the
caller-allocated buffer size, and the size-used on successful output. 
Buffers for plaintexts, ciphertexts, aad and other caller-provided values
can be any size, other buffers (for example for key material, aad, etc.)
may be limited at compile time to be at most OSSL_HPKE_MAXSIZE (256).

- private key values are handled as L<EVP_PKEY(3)> pointers. Public key values
are handled as buffers

- I<aad> is a buffer for additional authenticated data

- I<info> is a buffer for information to be bound to the HPKE exchange (generally
to "fold in" identity information)

- I<pub> is the receiver's typically non-ephemeral public value to which a
sender will encrypt (basically an ECDH public key, though in future that
could be less true)

- I<enc> is a buffer for the ephemeral encapsulaed public value generated
by the sender (encryptor) and to be used by the recipient (decryptor) 

- I<priv> is the receiver's typically non-ephemeral ECDH private value for decryption
in L<EVP_PKEY(3)> form

- I<seq> is a uint64_t representing the sequencing of encryptions when multiple
calls are made (to be XOR'd with an internal nonce - that type was chosen to
match other HPKE implemenations)

=back

=head1 RETURN VALUES

OSSL_HPKE_CTX_new() returns an OSSL_HPKE_CTX pointer or NULL on error.

OSSL_HPKE_get_ciphertext_size(), OSSL_HPKE_get_public_encap_size(),
OSSL_HPKE_get_recommended_ikmelen() all return a size_t with the 
relevant value or zero on error.

All other functions return 1 for success or zero for error.


=head1 EXAMPLES

This example demonstrates a minimal round-trip using HPKE.

    #include <stddef.h>
    #include <string.h>
    #include <openssl/hpke.h>
    #include <openssl/evp.h>

    /* 
     * this is big enough for this example, real code would need different 
     * handling
     */
    #define LBUFSIZE 48

    /* we'll do a round-trip, generating a key, encrypting and decrypting */
    int main(int argc, char **argv)
    {
        int ok = 0;
        int hpke_mode = OSSL_HPKE_MODE_BASE;
        OSSL_HPKE_SUITE hpke_suite = OSSL_HPKE_SUITE_DEFAULT;
        OSSL_HPKE_CTX *sctx = NULL, *rctx = NULL;
        EVP_PKEY *priv = NULL;
        unsigned char pub[LBUFSIZE];
        size_t publen = sizeof(pub);
        unsigned char enc[LBUFSIZE];
        size_t enclen = sizeof(enc);
        unsigned char ct[LBUFSIZE];
        size_t ctlen = sizeof(ct);
        unsigned char clear[LBUFSIZE];
        size_t clearlen = sizeof(clear);
        
        const unsigned char *pt = "a message not in a bottle";
        size_t ptlen = strlen((char *)pt);
        const unsigned char *info = "Some info";
        size_t infolen = strlen((char *)info);
        unsigned char *aad = { 1, 2, 3, 4, 5, 6, 7, 8 };
        size_t aadlen = sizeof(aad);

        /*
         * Generate receiver's key pair.
         * The receiver gives this public key to the sender.
         */
        if (OSSL_HPKE_keygen(NULL, NULL, hpke_suite, NULL, 0,
                             pub, &publen, &priv) != 1)
            goto err;

        /* sender's actions - encrypt data using the receivers public key */
        if ((sctx = OSSL_HPKE_CTX_new(hpke_mode, hpke_suite, NULL, NULL)) == NULL)
            goto err;
        if (OSSL_HPKE_encap(sctx, enc, &enclen, pub, publen, info, infolen) != 1)
            goto err;
        if (OSSL_HPKE_seal(sctx, ct, &ctlen, aad, aadlen, pt, ptlen) != 1)
            goto err;

        /* receiver's actions - decrypt data using the recievers private key */
        if ((rctx = OSSL_HPKE_CTX_new(hpke_mode, hpke_suite, NULL, NULL)) == NULL)
            goto err;
        if (OSSL_HPKE_decap(rctx, enc, enclen, priv, info, infolen) != 1) 
            goto err;
        if (OSSL_HPKE_open(rctx, clear, &clearlen, aad, aadlen, ct, ctlen) != 1)
            goto err;
        ok = 1;
    err:
        /* clean up */
        printf(ok ? "All Good!\n" : "Error!\n");
        OSSL_HPKE_CTX_free(rctx);
        OSSL_HPKE_CTX_free(ctx);
        EVP_PKEY_free(priv);
        return 0;
    }

=head1 WARNING

Note that the OSSL_HPKE_CTX_set_seq() API could be dangerous - if used with
GCM that could lead to nonce-reuse, which is a known danger. So avoid that
entirely, or be very very careful when using that API.

Use of an IKM value for deterministic key generation (via
OSSL_HPKE_CTX_set1_ikme() or OSSL_HPKE_keygen()) creates the potential for
leaking keys (or IKM values). Only use that if really needed and if you
understand how keys or IKM values could be abused.

=head1 SEE ALSO

The RFC9180 specification: https://datatracker.ietf.org/doc/rfc9180/

=head1 HISTORY

Initially developed by Stephen Farrell supported by OTF via
the DEfO project: https://defo.ie/

=head1 COPYRIGHT

Copyright 2022 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
