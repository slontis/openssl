=pod

=head1 NAME

EVP_KDF_X963 - The X9.63-2001 EVP_KDF implementation

=head1 DESCRIPTION

The EVP_KDF_X963 algorithm implements the key derivation function (X963KDF).
X963KDF is used by Cryptographic Message Syntax (CMS) for EC KeyAgreement, to
derive a key using input such as a shared secret key and shared info.

=head2 Numeric identity

B<EVP_KDF_X963> is the numeric identity for this implementation; it
can be used with the EVP_KDF_CTX_new_id() function.

=head2 Supported controls

The supported controls are:

=over 4

=item B<EVP_KDF_CTRL_SET_MD>

This control works as described in L<EVP_KDF_CTX(3)/CONTROLS>.

=item B<EVP_KDF_CTRL_SET_KEY>

This control expects two arguments: C<unsigned char *secret>, C<size_t secretlen>

The shared secret used for key derivation.  This control sets the secret.

EVP_KDF_ctrl_str() takes two type strings for this control:

=over 4

=item "secret"

The value string is used as is.

=item "hexsecret"

The value string is expected to be a hexadecimal number, which will be
decoded before being passed on as the control value.

=back

=item B<EVP_KDF_CTRL_SET_SHARED_INFO>

This control expects two arguments: C<unsigned char *info>, C<size_t infolen>

An optional value for shared info.

EVP_KDF_ctrl_str() takes two type strings for this control:

=over 4

=item "info"

The value string is used as is.

=item "hexinfo"

The value string is expected to be a hexadecimal number, which will be
decoded before being passed on as the control value.

=back

=back

=head1 NOTES

X963KDF is very similar to the SSKDF that uses a digest as the auxilary function,
X963KDF appends the counter to the secret, whereas SSKDF prepends the counter.

A context for X963KDF can be obtained by calling:

EVP_KDF_CTX *kctx = EVP_KDF_CTX_new_id(EVP_KDF_X963);

The output length of an X963KDF is specified via the C<keylen>
parameter to the L<EVP_KDF_derive(3)> function.

=head1 EXAMPLE

This example derives 10 bytes, with the secret key "secret" and sharedinfo
value "label":

  EVP_KDF_CTX *kctx;
  unsigned char out[10];

  kctx = EVP_KDF_CTX_new_id(EVP_KDF_X963);

  if (EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_MD, EVP_sha256()) <= 0) {
      error("EVP_KDF_CTRL_SET_MD");
  }
  if (EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KEY, "secret", (size_t)6) <= 0) {
      error("EVP_KDF_CTRL_SET_KEY");
  }
  if (EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_SHARED_INFO, "label", (size_t)5) <= 0) {
      error("EVP_KDF_CTRL_SET_SHARED_INFO");
  }
  if (EVP_KDF_derive(kctx, out, sizeof(out)) <= 0) {
      error("EVP_KDF_derive");
  }

  EVP_KDF_CTX_free(kctx);

=head1 CONFORMING TO

"SEC 1: Elliptic Curve Cryptography"

=head1 SEE ALSO

L<EVP_KDF_CTX>,
L<EVP_KDF_CTX_new_id(3)>,
L<EVP_KDF_CTX_free(3)>,
L<EVP_KDF_ctrl(3)>,
L<EVP_KDF_size(3)>,
L<EVP_KDF_derive(3)>,
L<EVP_KDF_CTX(3)/CONTROLS>

=head1 HISTORY

This functionality was added to OpenSSL 3.0.0.

=head1 COPYRIGHT

Copyright 2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
